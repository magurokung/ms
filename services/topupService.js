// services/topupService.js
const User = require('../models/User');
const TopupLog = require('../models/TopupLog');
const truemoneyApi = require('./truemoneyApi');

class TopupService {
  /**
   * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å voucher hash ‡∏à‡∏≤‡∏Å URL
   * @param {string} link - ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
   * @returns {string} voucher hash
   */
  extractVoucherHash(link) {
    try {
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL
      const patterns = [
        /v=([a-zA-Z0-9]+)/,  // ?v=hash
        /\/([a-zA-Z0-9]+)$/,  // /hash
        /gift\.truemoney\.com\/campaign\/\?v=([a-zA-Z0-9]+)/
      ];
      
      for (const pattern of patterns) {
        const match = link.match(pattern);
        if (match && match[1]) {
          return match[1];
        }
      }
      
      throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } catch (error) {
      throw new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
   * @param {string} voucherHash - ‡∏£‡∏´‡∏±‡∏™‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
   * @returns {Promise<boolean>}
   */
  async isVoucherUsed(voucherHash) {
    const existingLog = await TopupLog.findOne({ voucherHash });
    return !!existingLog;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
   * @param {number} amount - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
   * @returns {boolean}
   */
  validateAmount(amount) {
    const numAmount = parseFloat(amount);
    return numAmount > 0 && numAmount <= 50000;
  }

  /**
   * ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * @param {string} steamId - Steam ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * @param {string} link - ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
   * @returns {Promise<Object>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
   */
  async processTopup(steamId, link) {
    let voucherHash;
    
    console.log('üîç Processing topup for steamId:', steamId);
    
    try {
      // ‡πÅ‡∏¢‡∏Å voucher hash ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå
      voucherHash = this.extractVoucherHash(link);
      const fullVoucherUrl = `https://gift.truemoney.com/campaign/?v=${voucherHash}`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏Å‡πà‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const user = await User.findOne({ steamId: steamId });
      if (!user) {
        console.error('‚ùå User not found with steamId:', steamId);
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
      }
      
      console.log('‚úÖ User found:', { 
        _id: user._id, 
        steamId: user.steamId, 
        displayName: user.displayName,
        currentBalance: user.balance 
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const isUsed = await this.isVoucherUsed(voucherHash);
      if (isUsed) {
        throw new Error('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      }

      console.log('üîÅ Processing voucher:', voucherHash);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏Å‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
      const apiResult = await truemoneyApi.redeemVoucher(fullVoucherUrl);
      
      console.log('üîç Final API Result:', JSON.stringify(apiResult, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const statusCode = apiResult.status?.code;
      const statusMessage = apiResult.status?.message;
      const hasVoucherData = apiResult.data?.voucher?.amount_baht;
      
      console.log('üîç Status Check:', { statusCode, statusMessage, hasVoucherData });
      
      const isSuccess = statusCode === 'SUCCESS' || statusMessage === 'success';
      
      console.log('‚úÖ Is Success:', isSuccess);
      
      if (!isSuccess) {
        throw new Error(apiResult.message || apiResult.error || statusMessage || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ');
      }

      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå
      const amount = parseFloat(
        apiResult.data?.voucher?.amount_baht ||
        apiResult.data?.voucher?.redeemed_amount_baht ||
        apiResult.data?.my_ticket?.amount_baht ||
        apiResult.amount_bath || 
        apiResult.amount || 
        apiResult.value || 
        apiResult.money ||
        apiResult.data?.amount_bath ||
        apiResult.data?.amount
      ) || 0;
      
      console.log('üí∞ Amount extracted:', amount);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      if (!this.validateAmount(amount)) {
        throw new Error('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      // ‡πÉ‡∏ä‡πâ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      const session = await User.startSession();
      
      try {
        await session.withTransaction(async () => {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡πÉ‡∏ä‡πâ steamId ‡πÅ‡∏ó‡∏ô _id
          const updateResult = await User.updateOne(
            { steamId: steamId }, 
            { $inc: { balance: amount } }
          ).session(session);
          
          console.log('üìä Update result:', updateResult);
          
          if (updateResult.matchedCount === 0) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô');
          }

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          const logEntry = {
            steamId: steamId, // ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MongoDB _id
            voucherHash,
            amount,
            date: new Date() // ‡πÉ‡∏ä‡πâ date ‡∏ï‡∏≤‡∏° model
          };
          
          console.log('üìù Creating log entry:', logEntry);
          
          await TopupLog.create([logEntry], { session });
        });
      } finally {
        await session.endSession();
      }

      console.log(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${amount} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${steamId}`);

      // ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      const updatedUser = await User.findOne({ steamId: steamId });
      
      return {
        success: true,
        amount,
        newBalance: updatedUser?.balance || 0,
        message: `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó (‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${updatedUser?.balance?.toLocaleString() || 0} ‡∏ö‡∏≤‡∏ó)`
      };

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
      console.error('‚ùå Error stack:', error.stack);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å failed log - ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      try {
        const failedLogEntry = {
          steamId: steamId, // ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
          voucherHash: voucherHash || 'unknown',
          amount: 0,
          date: new Date(),
          error: error.message
        };
        
        console.log('üìù Creating failed log entry:', failedLogEntry);
        await TopupLog.create(failedLogEntry);
      } catch (logError) {
        console.error('‚ùå Failed to log error:', logError.message);
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
      let message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô';
      
      if (error.status === 400) {
        message = '‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß';
      } else if (error.status === 404) {
        message = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      } else if (error.status && error.status >= 500) {
        message = '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå TrueMoney ‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
      } else if (error.response?.data?.message) {
        message = error.response.data.message;
      } else if (error.message === '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á') {
        message = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
      } else if (error.name === 'TimeoutError' || error.code === 'ETIMEDOUT') {
        message = '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
      } else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
        message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
      } else if (error.message) {
        message = error.message;
      }

      return {
        success: false,
        message
      };
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
   * @param {string} steamId - Steam ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * @param {number} limit - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
   * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
   */
  async getTopupHistory(steamId, limit = 10) {
    try {
      console.log('üìä Getting topup history for steamId:', steamId);
      
      const history = await TopupLog.find({ steamId: steamId }) // ‡πÉ‡∏ä‡πâ steamId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        .sort({ date: -1 })
        .limit(limit)
        .select('amount date voucherHash error -_id')
        .lean();
        
      console.log('üìä Found topup history:', history.length, 'records');
      
      return history;
    } catch (error) {
      console.error('‚ùå Error getting topup history:', error.message);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
   * @param {string} steamId - Steam ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   * @returns {Promise<Object>} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
   */
  async getTopupStats(steamId) {
    try {
      const stats = await TopupLog.aggregate([
        { $match: { steamId: steamId, amount: { $gt: 0 } } },
        {
          $group: {
            _id: null,
            totalAmount: { $sum: '$amount' },
            totalTransactions: { $sum: 1 },
            averageAmount: { $avg: '$amount' },
            lastTopup: { $max: '$date' }
          }
        }
      ]);

      return stats[0] || {
        totalAmount: 0,
        totalTransactions: 0,
        averageAmount: 0,
        lastTopup: null
      };
    } catch (error) {
      console.error('‚ùå Error getting topup stats:', error.message);
      return {
        totalAmount: 0,
        totalTransactions: 0,
        averageAmount: 0,
        lastTopup: null
      };
    }
  }
}

module.exports = new TopupService();