// routes/topup.js
const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const topupService = require('../services/topupService');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô Steam ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
function isAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  return res.redirect('/login');
}

// Helper function to get Steam ID from user object
function getSteamId(user) {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Steam ID field
  return user.steamId || user.steamid || user.id || user._json?.steamid;
}

// Validation middleware
const validateVoucherLink = [
  body('link')
    .notEmpty()
    .withMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤')
    .matches(/truemoney\.com/)
    .withMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå TrueMoney ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
];

// POST route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏Å‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
router.post('/redeem', isAuthenticated, validateVoucherLink, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.render('top-up', { 
      user: req.user,
      error: errors.array()[0].msg, 
      success: null 
    });
  }

  const { link } = req.body;
  const steamId = getSteamId(req.user);

  // Debug log
  console.log('üîç Route - User object:', {
    steamId: req.user.steamId,
    steamid: req.user.steamid,
    id: req.user.id,
    _id: req.user._id,
    displayName: req.user.displayName
  });
  console.log('üîç Route - Extracted steamId:', steamId);

  if (!steamId) {
    console.error('‚ùå No Steam ID found in user object');
    return res.render('top-up', {
      user: req.user,
      error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Steam ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà',
      success: null
    });
  }

  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ topup service
    const result = await topupService.processTopup(steamId, link);

    if (result.success) {
      return res.render('top-up', {
        user: req.user,
        success: result.message,
        error: null,
        newBalance: result.newBalance
      });
    } else {
      return res.render('top-up', {
        user: req.user,
        error: result.message,
        success: null
      });
    }

  } catch (error) {
    console.error('‚ùå Unexpected error in topup route:', error.message);
    console.error('‚ùå Error stack:', error.stack);
    
    return res.render('top-up', {
      user: req.user,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á',
      success: null
    });
  }
});

// GET route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ top-up
router.get('/', isAuthenticated, async (req, res) => {
  try {
    const steamId = getSteamId(req.user);
    
    if (!steamId) {
      console.error('‚ùå No Steam ID found for getting topup page');
      return res.render('top-up', {
        user: req.user,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Steam ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà',
        success: null,
        recentTopups: []
      });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
    const recentTopups = await topupService.getTopupHistory(steamId, 10);

    res.render('top-up', {
      user: req.user,
      error: null,
      success: null,
      recentTopups
    });
  } catch (error) {
    console.error('‚ùå Error loading top-up page:', error.message);
    res.render('top-up', {
      user: req.user,
      error: null,
      success: null,
      recentTopups: []
    });
  }
});

// GET route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô (JSON API)
router.get('/history', isAuthenticated, async (req, res) => {
  try {
    const steamId = getSteamId(req.user);
    
    if (!steamId) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Steam ID'
      });
    }
    
    const limit = parseInt(req.query.limit) || 20;
    
    const history = await topupService.getTopupHistory(steamId, limit);
    const stats = await topupService.getTopupStats(steamId);
    
    res.json({
      success: true,
      data: {
        history,
        stats
      }
    });
  } catch (error) {
    console.error('‚ùå Error getting topup history:', error.message);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥'
    });
  }
});

// GET route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
router.get('/stats', isAuthenticated, async (req, res) => {
  try {
    const steamId = getSteamId(req.user);
    
    if (!steamId) {
      return res.status(400).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Steam ID'
      });
    }
    
    const stats = await topupService.getTopupStats(steamId);
    
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('‚ùå Error getting topup stats:', error.message);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
    });
  }
});

module.exports = router;